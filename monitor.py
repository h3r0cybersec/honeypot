#!/usr/bin/env python3

"""
    AUTHOR : Cavallo Luigi
    DESCRIPTION: 
    This module manage the various server instances active on the current machine.
    For now it can see all active server instances and send to them SIGKILL for 
    shutdown the service.
    TODOS:
    -> Define good architecture
    -> Implement individual operations by offering an interactive prompt
    -> Implement usage method for defined commands
    -> Improve exit condiction of the __retrive_active_services method
"""

from manager import manager
from lib.utils.utils import message
import os
import sys
from json import *

class monitor(object):
    """
        This is the system monitor which is responsible
        for starting the dialogue with the server that 
        manages the services. It can send to the server
        different command for start, kill or log services 
        data.
    """

    __version__ = "0.0"
    __author__  = "cavallo luigi"
    __email__ = "luigi.cavallo_lc@libero.it"

    def __init__(self, machine_services: object, server_config: object):
        # Services file position 
        self.root_service_log = os.path.join("machine-services", machine_services)
        # Services file config
        self.root_service_cfg = os.path.join("services-cfg", server_config)
        # Config options of active services that must be initialized
        self.__server_config = self.__retrive_active_services()
        # Services Manager
        self.__manager = manager(self.__server_config)
        # All active services
        self.__services = None
        # shell 
        # ...

    def shell(self):
        """
            Command and Controll system
        """
        while True:
            cmd = input("shell>")
            if cmd == "exit":
                # close honeypot
                break
            elif cmd == "start":
                """
                    This command allows you to start a certain service
                    or a list of services
                """
                pass
            elif cmd == "logs":
                """
                    This command allows you to view a real time log 
                    associated to a running service
                """
                pass
            elif cmd == "kill":
                """
                    This command allows you kill a runnig service or
                    a list of running services
                """
                pass
            else:
                message("Invalid command", "[!]", "red")
    
    def __retrive_active_services(self):
        """
            Parse the .services file generated by the scanner 
            an retrieve active services.
        """
        services = {}
        try:
            with open(self.root_service_log) as fd_services_log:
                with open(self.root_service_cfg, "r+") as fd_service_config:
                    active = load(fd_service_config)
                    fd_service_config.seek(0)
                    fd_service_config.truncate()
                    for info in fd_services_log.readlines():
                        proto, status, port = info.split("||")
                        if status.strip() == "open":
                            print("Writing active protocol : %s" % proto.strip())
                            active["active"].append(proto.strip())
                            # prepares the services to be activated to the 
                            for service in active["servers"]:
                                if service["type"] in active["active"]:
                                    services["servers"] = [
                                        {
                                            "type" : service["type"],
                                            "config" : service["config"]
                                        }
                                    ]
                    # save in active field which services are currently activated on this machine
                    dump(active, fd_service_config, indent=4)
            return services
        except: 
            message(message="Fatal error when editing the configuration file", sym="[!]", color="red")
            sys.exit(1)

                        


m = monitor("log.services", "config-test.json")


